{"version":3,"sources":["angular-strap.js","modal/modal.js","helpers/compiler.js","datepicker/datepicker.js","typeahead/typeahead.js","tooltip/tooltip.js","timepicker/timepicker.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","navbar/navbar.js","popover/popover.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","aside/aside.js","dropdown/dropdown.js","collapse/collapse.js","button/button.js","alert/alert.js","affix/affix.js","module.js"],"names":["customClass","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","prefixClass","data","this","compile","controller","console","controllerAs","resolve","copy","locals","bindToController","angular","forEach","value","isString","$injector","key","invoke","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","bsCompilerService","$inject","placement","provider","container","backdrop","keyboard","show","size","zIndex","$get","requestAnimationFrame","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","config","$modal","$emit","prefixEvent","isDefined","onShow","isFunction","onHide","toggle","hide","unbindBackdropEvents","modalElement","off","hideOnBackdropClick","backdropElement","preventEventDefault","bindKeyboardEvents","on","$onKeyUp","focus","evt","preventDefault","modalScope","$isShown","$destroy","$element","parseInt","backdropBaseZindex","$scope","$new","$rootScope","id","$id","attr","$show","$sce","trustAsHtml","$$postDigest","left","bottom","right","promise","css","compileData","init","destroy","destroyModalElement","parent","after","isElement","z-index","clonedElement","onBeforeShow","display","defaultPrevented","addClass","$animate","enter","minor","backdropAnimation","el","enterAnimateCallback","safeDigest","bindBackdropEvents","version","leave","leaveAnimateCallback","onBeforeHide","unbindKeyboardEvents","which","directive","$root","$$phase","$digest","restrict","query","document","querySelectorAll","lg","sm","$window","setTimeout","body","$options","falseValueRegExp","test","bsKey","modalClass","$observe","charAt","newValue","oldValue","$eval","$watch","bsModal","modal","trigger","$on","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$typeahead","parentScope","$resetMatches","$tooltip","$$rAF","$timeout","$matches","activate","$activeIndex","select","index","$select","matches","$isVisible","update","$render","onSelect","$setViewValue","length","equals","$onMouseDown","stopPropagation","keyCode","$onKeyDown","TypeaheadFactory","array","$filter","expression","results","postLink","require","toUpperCase","slice","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","ngModel","$modelValue","valuesFn","selectMode","$viewValue","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","label","target","titleTemplate","title","type","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","$bsCompiler","split","clearTimeout","hoverState","destroyTipElement","_tipToHide","triggers","nodeName","isTouch","unbindTriggerEvents","$onFocusElementMouseDown","i","tipElement","_autoCloseEventsBinded","bindAutoCloseEvents","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","elRect","getBoundingClientRect","rect","p","width","height","top","dimensions","offset","scroll","outerDims","isBody","documentElement","scrollTop","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","props","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","tipScope","$promise","toLowerCase","map","parseFloat","$setEnabled","$hide","setEnabled","isEnabled","tipContainer","bindTriggerEvents","lastChild","visibility","prepend","$applyPlacement","_blur","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","blur","isNative","tooltip","transclusion","dataTarget","hasOwnProperty","bsTooltip","bsShow","match","setViewport","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","isUndefined","collapse","moveStart","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","midIndex","hours","disabled","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","targetEl","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","self","navClass","activeClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","$active","$attrs","$navClass","$remove","active","activeIndex","indexOf","splice","$setActive","name","fn","$pane","$tab","transclude","ngModelCtrl","bsTabsCtrl","attrs","bsActivePane","parsedBsActivePane","assign","$parse","controllers","render","$isActive","multiple","allNoneButtons","replaceContents","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","a","b","$apply","isArray","$getIndex","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","e","dataMultiple","inputEl","addEventListener","join","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","offsetTop","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","content","$popover","PopoverFactory","bsPopover","popover","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","call","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","prototype","noop","indexOfCaseInsensitive","len","str","toString","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","getDateForAttribute","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$hasToday","$picker","$selectPane","$hasClear","$toggleMode","$views","$mode","setMode","$setToday","$clear","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","$updateSelected","built","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","onKeyDown","datepickerViews","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isTodayDisabled","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","setYear","AsideFactory","$aside","bsAside","aside","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","bsCollapseToggle","$registerTarget","action","toggleEvent","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","toggleClass","bind","v","duration","dismissable","AlertFactory","$alert","bsAlert","alert","AffixFactory","inlineStyles","$affix","setWidth","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","pageYOffset","offsetBottom","elementHeight","initialAffixTop","affixed","unpin","$parseOffsets","affix","offsetUnpin","$onResize","initialTop","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      replaceContents: true,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder, replaceContents: defaults.replaceContents};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'replaceContents', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'replaceContents', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          if (!!options.replaceContents) {\n            element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n          }\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: helpers/raf.js\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      replaceContents: true,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder, replaceContents: defaults.replaceContents};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'replaceContents', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'replaceContents', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          if (!!options.replaceContents) {\n            element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n          }\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"],"sourceRoot":"/source/"}