{"version":3,"sources":["angular-strap.js","scrollspy/scrollspy.js","helpers/compiler.js","dropdown/dropdown.js","navbar/navbar.js","tooltip/tooltip.js","typeahead/typeahead.js","timepicker/timepicker.js","popover/popover.js","tab/tab.js","select/select.js","modal/modal.js","datepicker/datepicker.js","aside/aside.js","button/button.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","alert/alert.js","collapse/collapse.js","affix/affix.js","module.js"],"names":["throttle","document","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","prefixClass","data","this","compile","controller","console","controllerAs","resolve","copy","locals","bindToController","angular","forEach","value","isString","$injector","key","invoke","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","bsCompilerService","$inject","$get","$document","$rootScope","dimensions","spies","windowEl","debounce","bodyEl","nodeName","offset","ScrollSpyFactory","config","scrollEl","isWindowSpy","scrollId","id","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","scrollTop","checkPositionWithEventLoop","on","checkOffsets","$on","off","checkPosition","i","isUndefined","prop","docEl","target","$activateElement","length","offsetTop","setTimeout","activeElement","source","$getTrackedElement","addClass","removeClass","parent","filter","targetElement","querySelector","trackedElement","el","b","top","trackElement","push","toDelete","untrackElement","splice","activate","directive","restrict","init","body","scrollspy","destroy","childEl","attr","querySelectorAll","child","activeClass","provider","routeAttr","isDefined","$navbar","oldValue","liElements","li","liElement","$watch","pattern","path","newValue","RegExp","regexp","test","placement","titleTemplate","trigger","keyboard","show","title","type","delay","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","promise","$tooltip","$bsCompiler","split","clearTimeout","hoverState","prefixEvent","hide","isFunction","onShow","leaveAnimateCallback","$emit","destroyTipElement","onHide","_tipToHide","evt","preventDefault","triggers","isTouch","toggle","enter","unbindTriggerEvents","$onFocusElementMouseDown","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$timeout","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","$element","elRect","getBoundingClientRect","rect","p","width","height","left","scroll","outerDims","isBody","documentElement","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","$isShown","tipScope","$destroy","$$phase","$options","$promise","$scope","$new","toLowerCase","$id","map","parseFloat","$sce","trustAsHtml","$setEnabled","$$postDigest","$hide","setEnabled","isEnabled","compileData","tipContainer","container","bindTriggerEvents","isElement","focus","onBeforeShow","after","lastChild","display","visibility","clonedElement","safeDigest","version","prepend","$$rAF","$applyPlacement","$animate","enterAnimateCallback","_blur","leave","onBeforeHide","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","tipPosition","getCalculatedOffset","applyPlacement","blur","stopPropagation","$root","$digest","query","isNative","tooltip","transclusion","falseValueRegExp","$eval","bsKey","dataTarget","slice","hasOwnProperty","$observe","bsTooltip","bsShow","match","setViewport","minLength","limit","autoSelect","comparator","trimValue","$typeahead","parentScope","$resetMatches","$window","$matches","$activeIndex","select","index","$select","matches","$isVisible","update","$render","onSelect","$setViewValue","equals","$onMouseDown","keyCode","$onKeyDown","TypeaheadFactory","array","$filter","expression","results","postLink","require","charAt","toUpperCase","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","ngModel","$modelValue","valuesFn","selectMode","$viewValue","substring","displayValue","$formatters","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","label","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","collapse","moveStart","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","midIndex","hours","disabled","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","targetEl","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","self","navClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","$active","$attrs","$navClass","$remove","active","activeIndex","indexOf","$setActive","name","fn","$pane","$tab","transclude","ngModelCtrl","bsTabsCtrl","attrs","bsActivePane","parsedBsActivePane","assign","$parse","controllers","render","$isActive","multiple","allNoneButtons","replaceContents","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","a","$apply","isArray","$getIndex","$selectScrollFix","$isIE","stopImmediatePropagation","ua","tagName","e","dataMultiple","inputEl","addEventListener","join","$isEmpty","backdrop","size","zIndex","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","unbindBackdropEvents","modalElement","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","backdropBaseZindex","$show","bottom","destroyModalElement","z-index","defaultPrevented","customClass","minor","backdropAnimation","bindBackdropEvents","which","lg","sm","modalClass","bsModal","modal","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$hasToday","$picker","$selectPane","$hasClear","$toggleMode","$views","$mode","setMode","$setToday","$clear","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","year","getFullYear","month","getDate","mode","pristine","call","$updateSelected","built","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","onKeyDown","datepickerViews","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","strict","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","m","arr","weekDaysMin","weekdaysShort","weekDaysLabelsHtml","picker","weekDaysLabels","concat","getMonth","firstDayOfMonth","firstDayOfMonthOffset","getTimezoneOffset","firstDate","firstDateOffset","build","days","day","daylightSavingAdjust","isToday","toDateString","today","muted","showLabels","labels","isTodayDisabled","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","prototype","setYear","AsideFactory","$aside","bsAside","aside","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","isActive","checked","toggleClass","bind","toggleEvent","hasClass","v","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","$localeProvider","milliseconds","ParseDate","noop","indexOfCaseInsensitive","len","str","toString","DateParserFactory","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDateForAttribute","substr","getTimeForAttribute","undo","getDefaultLocale","getDatetimeFormat","splitTimeFormat","service","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","duration","dismissable","AlertFactory","$alert","bsAlert","alert","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","$activeIndexes","bsCollapseCtrl","bsCollapseToggle","$registerTarget","action","inlineStyles","AffixFactory","$affix","setWidth","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","pageYOffset","offsetBottom","elementHeight","initialAffixTop","affixed","unpin","$parseOffsets","affix","offsetUnpin","$onResize","initialTop","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      replaceContents: true,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          if (!!options.replaceContents) {\n            element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n          }\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: helpers/raf.js\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      replaceContents: true,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          if (!!options.replaceContents) {\n            element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n          }\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"],"sourceRoot":"/source/"}